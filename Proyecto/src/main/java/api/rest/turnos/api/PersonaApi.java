/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package api.rest.turnos.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import api.rest.turnos.model.swagger.Persona;
import api.rest.turnos.model.swagger.PersonaConClave;
import api.rest.turnos.model.swagger.Respuesta;
import api.rest.turnos.model.swagger.RespuestaListaPersonas;
import api.rest.turnos.model.swagger.RespuestaPersona;
import api.rest.turnos.model.swagger.RespuestaPersonaRegistrada;
import api.rest.turnos.model.swagger.Turno;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-11T00:45:19.203Z[GMT]")
@Validated
public interface PersonaApi {

    @Operation(summary = "Agrega una nueva persona", description = "", tags={ "persona" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RespuestaPersonaRegistrada.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/persona", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<RespuestaPersonaRegistrada> addPerson(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Persona body);


    @Operation(summary = "Saca un turno para una persona", description = "", tags={ "persona" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "404", description = "Evento inexistente para la organizacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/persona/turno", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Respuesta> addTurn(@Parameter(in = ParameterIn.HEADER, description = "cuit de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="cuit", required=true) String cuit, @Parameter(in = ParameterIn.HEADER, description = "nombre del evento" ,required=true,schema=@Schema()) @RequestHeader(value="evento", required=true) String evento, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Turno body);


    @Operation(summary = "Baja la cuenta de una persona", description = "", tags={ "persona" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/persona", produces = { "application/json" }, method = RequestMethod.DELETE)
    ResponseEntity<Respuesta> deletePerson(@Parameter(in = ParameterIn.HEADER, description = "dni de la persona" ,required=true,schema=@Schema()) @RequestHeader(value="dni", required=true) String dni, @Parameter(in = ParameterIn.HEADER, description = "clave de la persona" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave);


    @Operation(summary = "Muestra un usuario especifico", description = "", tags={ "persona" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RespuestaPersona.class))),
        @ApiResponse(responseCode = "404", description = "No hay personas registradas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/persona/{dni}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RespuestaPersona> getPerson(@Parameter(in = ParameterIn.PATH, description = "dni de la persona", required=true, schema=@Schema()) @PathVariable("dni") String dni);


    @Operation(summary = "Muestra la lista de usuarios registrados", description = "", tags={ "persona" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RespuestaListaPersonas.class))),
        @ApiResponse(responseCode = "404", description = "No hay personas registradas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/persona", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RespuestaListaPersonas> getPersons(@Parameter(in = ParameterIn.QUERY, description = "filtro por apellidos" ,schema=@Schema()) @Valid @RequestParam(value = "apellido", required = false) String apellido);


    @Operation(summary = "Modifica los datos de una persona", description = "", tags={ "persona" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/persona", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<Respuesta> updatePerson(@Parameter(in = ParameterIn.HEADER, description = "dni de la persona" ,required=true,schema=@Schema()) @RequestHeader(value="dni", required=true) String dni, @Parameter(in = ParameterIn.HEADER, description = "clave de la persona" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody PersonaConClave body);
}