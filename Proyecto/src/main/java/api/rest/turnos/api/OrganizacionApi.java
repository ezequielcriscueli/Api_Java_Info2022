/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package api.rest.turnos.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import api.rest.turnos.model.swagger.Organizacion;
import api.rest.turnos.model.swagger.Respuesta;
import api.rest.turnos.model.swagger.RespuestaListaOrganizaciones;
import api.rest.turnos.model.swagger.RespuestaOrganizacion;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-11T00:45:19.203Z[GMT]")
@Validated
public interface OrganizacionApi {
    @Operation(summary = "Agrega una nueva organizacion", description = "", tags={ "organizacion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/organizacion", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Respuesta> addOrganization(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Organizacion body);


    @Operation(summary = "Elimina una organizacion", description = "", tags={ "organizacion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/organizacion", produces = { "application/json" }, method = RequestMethod.DELETE)
    ResponseEntity<Respuesta> deleteOrganization(@Parameter(in = ParameterIn.HEADER, description = "cuit de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="cuit", required=true) String cuit, @Parameter(in = ParameterIn.HEADER, description = "clave de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave);


    @Operation(summary = "Muestra una organizacion por su nombre o su cuit", description = "", tags={ "organizacion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RespuestaOrganizacion.class))),
        @ApiResponse(responseCode = "404", description = "No hay turnos registrados para la organizacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/organizacion/{filtro}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RespuestaOrganizacion> getOrganizationByFilter(@Parameter(in = ParameterIn.PATH, description = "nombre o cuit de la organizacion", required=true, schema=@Schema()) @PathVariable("filtro") String filtro);


    @Operation(summary = "Muestra todas las organizaciones", description = "", tags={ "organizacion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RespuestaListaOrganizaciones.class))),
        @ApiResponse(responseCode = "404", description = "No hay turnos registrados", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/organizacion", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RespuestaListaOrganizaciones> getOrganizations();


    @Operation(summary = "Modifica una organizacion", description = "", tags={ "organizacion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/organizacion", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<Respuesta> updateOrganization(@Parameter(in = ParameterIn.HEADER, description = "cuit de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="cuit", required=true) String cuit, @Parameter(in = ParameterIn.HEADER, description = "clave de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Organizacion body);
}