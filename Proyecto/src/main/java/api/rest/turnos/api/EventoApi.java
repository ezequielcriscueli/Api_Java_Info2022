/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package api.rest.turnos.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import api.rest.turnos.model.swagger.Evento;
import api.rest.turnos.model.swagger.Respuesta;
import api.rest.turnos.model.swagger.RespuestaTurnos;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-11T00:45:19.203Z[GMT]")
@Validated
public interface EventoApi {
    @Operation(summary = "Agrega un evento", description = "", tags={ "evento" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/evento", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Respuesta> addEvent(@Parameter(in = ParameterIn.HEADER, description = "cuit de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="cuit", required=true) String cuit, @Parameter(in = ParameterIn.HEADER, description = "clave de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Evento body);


    @Operation(summary = "Elimina un evento", description = "", tags={ "evento" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "404", description = "Evento inexistente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/evento", produces = { "application/json" }, method = RequestMethod.DELETE)
    ResponseEntity<Respuesta> deleteEvent(@Parameter(in = ParameterIn.HEADER, description = "nombre del evento" ,required=true,schema=@Schema()) @RequestHeader(value="nombreEvento", required=true) String nombreEvento, @Parameter(in = ParameterIn.HEADER, description = "cuit de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="cuit", required=true) String cuit, @Parameter(in = ParameterIn.HEADER, description = "clave de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave);


    @Operation(summary = "Muestra todos los turnos de los eventos de la organizacion", description = "", tags={ "evento" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RespuestaTurnos.class))),
        @ApiResponse(responseCode = "404", description = "No hay turnos registrados", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/evento/{cuit}/{nombreEvento}/turnos", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RespuestaTurnos> getTurns(@Parameter(in = ParameterIn.PATH, description = "cuit de la organizacion", required=true, schema=@Schema()) @PathVariable("cuit") String cuit, @Parameter(in = ParameterIn.PATH, description = "nombre del evento", required=true, schema=@Schema()) @PathVariable("nombreEvento") String nombreEvento, @Parameter(in = ParameterIn.QUERY, description = "estado del turno" ,schema=@Schema()) @Valid @RequestParam(value = "activo", required = false) Boolean activo);


    @Operation(summary = "Modifica un evento", description = "", tags={ "evento" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "404", description = "Evento inexistente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "405", description = "Entrada invalida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "412", description = "Error de identificacion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        @ApiResponse(responseCode = "500", description = "Error del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) 
    })
    @RequestMapping(value = "/evento", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<Respuesta> updateEvent(@Parameter(in = ParameterIn.HEADER, description = "nombre del evento" ,required=true,schema=@Schema()) @RequestHeader(value="nombreEvento", required=true) String nombreEvento, @Parameter(in = ParameterIn.HEADER, description = "cuit de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="cuit", required=true) String cuit, @Parameter(in = ParameterIn.HEADER, description = "clave de la organizacion" ,required=true,schema=@Schema()) @RequestHeader(value="clave", required=true) String clave, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Evento body);
}